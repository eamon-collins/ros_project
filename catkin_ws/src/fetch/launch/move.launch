<launch>
  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi, ball_waffle_pi, ball2_waffle_pi]"/>

  <arg name="x_pos" default="-1"/>
  <arg name="y_pos" default="3.5"/>
  <arg name="z_pos" default="0.0"/>
  <arg name="a_pos" default="0.0"/>

  <arg name="w_name" default="challenge-world-t4"/>
  <!-- <arg name="algorithm" default="4"/> -->



  <param name="range_min" type="double" value=".12" />
  <param name="range_max" type="double" value="3.5" />
  <param name="a_min" type="double" value="0" />
  <param name="a_max" type="double" value="6.28" />
  <param name="a_inc" type="double" value=".0175" />
  <param name="scan_time" type="double" value="0" />


  
  <node name="fetcher" pkg="fetch" type="fetcher.py" respawn="false" output="screen" >
    <param name="V_explore" type="double" value="1" />
    <param name="totalDistance" type="int" value="10" />
    <param name="minDistanceWall" type="int" value="1" />
  </node> 




  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find fetch)/worlds/$(arg w_name)"/>
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="gui" value="true"/>
    <arg name="headless" value="false"/>
    <arg name="debug" value="false"/>
  </include>


  <include file="$(find turtlebot3_navigation)/launch/turtlebot3_navigation.launch">
    <arg name="initial_pose_x" value="$(arg x_pos)"/>
    <arg name="initial_pose_y" value="$(arg y_pos)"/>
    <arg name="initial_pose_a" value="$(arg a_pos)"/>
    <arg name="map_file" value="$(find fetch)/mymap/smallmap3.yaml"/>
  </include>


  <param name="robot_description" command="$(find xacro)/xacro --inorder $(find turtlebot3_description)/urdf/turtlebot3_$(arg model).urdf.xacro" />

  <node pkg="gazebo_ros" type="spawn_model" name="spawn_urdf" args="-urdf -model turtlebot3_$(arg model) -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -param robot_description" />

  <rosparam file="$(find fetch)/joint_config.yaml" ns="/control" command="load" />
  <node name="controller_spawner" pkg="controller_manager" type="spawner" ns="/control" respawn="false" output="screen" args="base_to_arm_joint_position_controller joint_state_controller"/> 

  <!-- <node name="turtle" pkg="fetch" type="turtle_method_$(arg algorithm).py" output="screen"/> -->

</launch>










